<%- include ("./partials/header") %>


<div class="container-fluid">
  <div class="row navbar-expand-md">
      <nav class="col-md-3 col-lg-2 bg-light navbar-collapse collapse sidebar" id="sidenav">
          <div class="sidebar-sticky flex-column w-100 mt-1">
              <ul class="nav flex-column">
                  <li class="nav-item">
                      <a class="nav-link active" href="/dashboard">
                          <span data-feather="home"></span><i class="fas fa-tachometer-alt"></i> Dashboard 
                      </a>
                  </li>
                  <li class="nav-item">
                      <a class="nav-link" href="/calendar">
                          <span data-feather="file"></span><i class="fa fa-calendar-alt" aria-hidden="true"></i> Calendar 
                      </a>
                  </li>
                  <li class="nav-item">
                      <a class="nav-link" href="#">
                          <span data-feather="shopping-cart"></span><i class="far fa-comment-dots"></i> Chat
                      </a>
                  </li>
<li class="nav-item">
                      <a class="nav-link" href="#">
                          <span data-feather="shopping-cart"></span><i class="fas fa-tasks"></i> To-do List
                      </a>
                  </li>
                  <li class="nav-item">
                      <a class="nav-link" href="#">
                          <span data-feather="users"></span><i class="fas fa-globe-americas"></i> Community Map
                      </a>
                  </li>
                  <li class="nav-item">
                      <a class="nav-link" href="#">
                          <span data-feather="bar-chart-2"></span><i class="fas fa-file-alt"></i> Files
                      </a>
                  </li>
                  <li class="nav-item">
                      <a class="nav-link" href="#">
                          <span data-feather="layers"></span><i class="fas fa-cogs"></i> Settings
                      </a>
                  </li>
              </ul>
          </div>
      </nav>
  </div>
</div>
<nav class="navbar navbar-dark sticky-top bg-dark flex-md-nowrap p-0 navbar-expand-md">
  <div class="navbar-brand d-flex align-items-center justify-content-between col-sm-12 col-md-2 mr-0">
      <a class="mr-1 d-md-none text-light" href="#sidenav" data-toggle="collapse" data-target="#sidenav">
          <span data-feather="menu" class="my-1"></span>
      </a>
      <a class="text-light" href="/dashboard"> <i class="fas fa-home"></i> MavRA</a>
      <a class="navbar-toggler border-0 p-0" href="#topnav" data-toggle="collapse" data-target="#topnav">
          <span data-feather="menu" class="my-1"></span>
      </a>
  </div>
  <div class="navbar-collapse collapse justify-content-end" id="topnav">
      <!-- <input class="form-control form-control-dark w-100" type="text" placeholder="Search" aria-label="Search"> -->
      <ul class="navbar-nav px-3 py-2 ">
          <li class="nav-item">
              <a class="nav-link float-right" href="#">Signed in as <span id="username"></span><i class="fas fa-user-plus"></i></a>
          </li>
          
          <li class="nav-item" id="logout">
              <a class="nav-link float-right" id="logmeout" href="http://localhost:3000">Logout</a>
          </li>
      </ul>
  </div>
</nav>


<!-- 
<script>
const fs = require('fs');
const readline = require('readline');
const {google} = require('googleapis');

// If modifying these scopes, delete token.json.
const SCOPES = ['https://www.googleapis.com/auth/calendar.readonly'];
// The file token.json stores the user's access and refresh tokens, and is
// created automatically when the authorization flow completes for the first
// time.
const TOKEN_PATH = 'token.json';

// Load client secrets from a local file.
fs.readFile('credentials.json', (err, content) => {
  if (err) return console.log('Error loading client secret file:', err);
  // Authorize a client with credentials, then call the Google Calendar API.
  authorize(JSON.parse(content), listEvents);
});

/**
 * Create an OAuth2 client with the given credentials, and then execute the
 * given callback function.
 * @param {Object} credentials The authorization client credentials.
 * @param {function} callback The callback to call with the authorized client.
 */
function authorize(credentials, callback) {
  const {client_secret, client_id, redirect_uris} = credentials.installed;
  const oAuth2Client = new google.auth.OAuth2(
      client_id, client_secret, redirect_uris[0]);

  // Check if we have previously stored a token.
  fs.readFile(TOKEN_PATH, (err, token) => {
    if (err) return getAccessToken(oAuth2Client, callback);
    oAuth2Client.setCredentials(JSON.parse(token));
    callback(oAuth2Client);
  });
}

/**
 * Get and store new token after prompting for user authorization, and then
 * execute the given callback with the authorized OAuth2 client.
 * @param {google.auth.OAuth2} oAuth2Client The OAuth2 client to get token for.
 * @param {getEventsCallback} callback The callback for the authorized client.
 */
function getAccessToken(oAuth2Client, callback) {
  const authUrl = oAuth2Client.generateAuthUrl({
    access_type: 'offline',
    scope: SCOPES,
  });
  console.log('Authorize this app by visiting this url:', authUrl);
  const rl = readline.createInterface({
    input: process.stdin,
    output: process.stdout,
  });
  rl.question('Enter the code from that page here: ', (code) => {
    rl.close();
    oAuth2Client.getToken(code, (err, token) => {
      if (err) return console.error('Error retrieving access token', err);
      oAuth2Client.setCredentials(token);
      // Store the token to disk for later program executions
      fs.writeFile(TOKEN_PATH, JSON.stringify(token), (err) => {
        if (err) return console.error(err);
        console.log('Token stored to', TOKEN_PATH);
      });
      callback(oAuth2Client);
    });
  });
}

/**
 * Lists the next 10 events on the user's primary calendar.
 * @param {google.auth.OAuth2} auth An authorized OAuth2 client.
 */
function listEvents(auth) {
  const calendar = google.calendar({version: 'v3', auth});
  calendar.events.list({
    calendarId: 'primary',
    timeMin: (new Date()).toISOString(),
    maxResults: 10,
    singleEvents: true,
    orderBy: 'startTime',
  }, (err, res) => {
    if (err) return console.log('The API returned an error: ' + err);
    const events = res.data.items;
    if (events.length) {
      console.log('Upcoming 10 events:');
      events.map((event, i) => {
        const start = event.start.dateTime || event.start.date;
        console.log(`${start} - ${event.summary}`);
      });
    } else {
      console.log('No upcoming events found.');
    }
  });
}
</script> -->

<div id="calendar">

</div>
<button type="button" style="margin-left: 680px; margin-top: 10px;" class="btn btn-info" data-toggle="modal" data-target="#exampleModal">
    Create Event
</button>
  <!-- <button type="button" class="btn">
    Launch demo modal
  </button> -->

<!-- Modal -->
<div class="modal fade" id="exampleModal" tabindex="-1" role="dialog" aria-labelledby="exampleModalLabel" aria-hidden="true">
  <div class="modal-dialog" role="document">
    <div class="modal-content">
      <div class="modal-header">
        <h4 class="modal-title" id="exampleModalLabel" style="color: black;">Add event details:</h4>
        <button type="button" class="close" data-dismiss="modal" aria-label="Close">
          <span aria-hidden="true">&times;</span>
        </button>
      </div>
      <div class="modal-body">
        <form action="/calendar" method="POST" name="myform">

          <label for="eventname" style="color: black;">Event name: </label>
          <input type="text" name="eventname" id="eventname">

          <label for="date" style="color: black;">Date: </label>
          <input type="date" name="date" id="date">          
          
        </form>
      </div>
      <div class="modal-footer">
        <button type="button" class="btn btn-secondary" data-dismiss="modal">Close</button>
        <a href="javascript:submitform()" class="btn btn-primary">Submit</a>
      </div>
    </div>
  </div>
</div>


<script>

function submitform()
{
    if(document.myform.onsubmit &&
    !document.myform.onsubmit())
    {
      return;
    }
 document.myform.submit();
}

!function() {

var today = moment();

function Calendar(selector, events) {
  this.el = document.querySelector(selector);
  this.events = events;
  this.current = moment().date(1);
  this.draw();
  var current = document.querySelector('.today');
  if(current) {
    var self = this;
    window.setTimeout(function() {
      self.openDay(current);
    }, 500);
  }
}

Calendar.prototype.draw = function() {
  //Create Header
  this.drawHeader();

  //Draw Month
  this.drawMonth();

  this.drawLegend();
}

Calendar.prototype.drawHeader = function() {
  var self = this;
  if(!this.header) {
    //Create the header elements
    this.header = createElement('div', 'header');
    this.header.className = 'header';

    this.title = createElement('h1');

    var right = createElement('div', 'right');
    right.addEventListener('click', function() { self.nextMonth(); });

    var left = createElement('div', 'left');
    left.addEventListener('click', function() { self.prevMonth(); });

    //Append the Elements
    this.header.appendChild(this.title); 
    this.header.appendChild(right);
    this.header.appendChild(left);
    this.el.appendChild(this.header);
  }

  this.title.innerHTML = this.current.format('MMMM YYYY');
}

Calendar.prototype.drawMonth = function() {
  var self = this;
  
  this.events.forEach(function(ev) {
    var rand = (Math.random() * (29 - 1) + 1);
   ev.date = self.current.clone().date(rand);
   console.log(ev.date,(rand));
  });
  
  
  if(this.month) {
    this.oldMonth = this.month;
    this.oldMonth.className = 'month out ' + (self.next ? 'next' : 'prev');
    this.oldMonth.addEventListener('webkitAnimationEnd', function() {
    self.oldMonth.parentNode.removeChild(self.oldMonth);
      self.month = createElement('div', 'month');
      self.backFill();
      self.currentMonth();
      self.fowardFill();
      self.el.appendChild(self.month);
      window.setTimeout(function() {
        self.month.className = 'month in ' + (self.next ? 'next' : 'prev');
      }, 16);
    });
  } else {
      this.month = createElement('div', 'month');
      this.el.appendChild(this.month);
      this.backFill();
      this.currentMonth();
      this.fowardFill();
      this.month.className = 'month new';
  }
}

Calendar.prototype.backFill = function() {
  var clone = this.current.clone();
  var dayOfWeek = clone.day();

  if(!dayOfWeek) { return; }

  clone.subtract('days', dayOfWeek+1);

  for(var i = dayOfWeek; i > 0 ; i--) {
    this.drawDay(clone.add('days', 1));
  }
}

Calendar.prototype.fowardFill = function() {
  var clone = this.current.clone().add('months', 1).subtract('days', 1);
  var dayOfWeek = clone.day();

  if(dayOfWeek === 6) { return; }

  for(var i = dayOfWeek; i < 6 ; i++) {
    this.drawDay(clone.add('days', 1));
  }
}

Calendar.prototype.currentMonth = function() {
  var clone = this.current.clone();

  while(clone.month() === this.current.month()) {
    this.drawDay(clone);
    clone.add('days', 1);
  }
}

Calendar.prototype.getWeek = function(day) {
  if(!this.week || day.day() === 0) {
    this.week = createElement('div', 'week');
    this.month.appendChild(this.week);
  }
}

Calendar.prototype.drawDay = function(day) {
  var self = this;
  this.getWeek(day);

  //Outer Day
  var outer = createElement('div', this.getDayClass(day));
  outer.addEventListener('click', function() {
    self.openDay(this);
  
  });

  //Day Name
  var name = createElement('div', 'day-name', day.format('ddd'));

  //Day Number
  var number = createElement('div', 'day-number', day.format('DD'));


  //Events
  var events = createElement('div', 'day-events');
  this.drawEvents(day, events);

  outer.appendChild(name);
  outer.appendChild(number);
  outer.appendChild(events);
  this.week.appendChild(outer);
}

Calendar.prototype.drawEvents = function(day, element) {
  if(day.month() === this.current.month()) {
    var todaysEvents = this.events.reduce(function(memo, ev) {
      if(ev.date.isSame(day, 'day')) {
        memo.push(ev);
      }
      return memo;
    }, []);

    todaysEvents.forEach(function(ev) {
      var evSpan = createElement('span', ev.color);
      element.appendChild(evSpan);
    });
  }
}

Calendar.prototype.getDayClass = function(day) {
  classes = ['day'];
  if(day.month() !== this.current.month()) {
    classes.push('other');
  } else if (today.isSame(day, 'day')) {
    classes.push('today');
  }
  return classes.join(' ');
}

Calendar.prototype.openDay = function(el) {
  var details, arrow;
  var dayNumber = +el.querySelectorAll('.day-number')[0].innerText || +el.querySelectorAll('.day-number')[0].textContent;
  var day = this.current.clone().date(dayNumber);

  var currentOpened = document.querySelector('.details');

  //Check to see if there is an open detais box on the current row
  if(currentOpened && currentOpened.parentNode === el.parentNode) {
    details = currentOpened;
    arrow = document.querySelector('.arrow');
  } else {
    //Close the open events on differnt week row
    //currentOpened && currentOpened.parentNode.removeChild(currentOpened);
    if(currentOpened) {
      currentOpened.addEventListener('webkitAnimationEnd', function() {
        currentOpened.parentNode.removeChild(currentOpened);
      });
      currentOpened.addEventListener('oanimationend', function() {
        currentOpened.parentNode.removeChild(currentOpened);
      });
      currentOpened.addEventListener('msAnimationEnd', function() {
        currentOpened.parentNode.removeChild(currentOpened);
      });
      currentOpened.addEventListener('animationend', function() {
        currentOpened.parentNode.removeChild(currentOpened);
      });
      currentOpened.className = 'details out';
    }

    //Create the Details Container
    details = createElement('div', 'details in');

    //Create the arrow
    var arrow = createElement('div', 'arrow');

    //Create the event wrapper

    details.appendChild(arrow);
    el.parentNode.appendChild(details);
  }

  var todaysEvents = this.events.reduce(function(memo, ev) {
    if(ev.date.isSame(day, 'day')) {
      memo.push(ev);
    }
    return memo;
  }, []);

  this.renderEvents(todaysEvents, details);

  arrow.style.left = el.offsetLeft - el.parentNode.offsetLeft + 27 + 'px';
}

Calendar.prototype.renderEvents = function(events, ele) {
  //Remove any events in the current details element
  var currentWrapper = ele.querySelector('.events');
  var wrapper = createElement('div', 'events in' + (currentWrapper ? ' new' : ''));

  events.forEach(function(ev) {
    var div = createElement('div', 'event');
    var square = createElement('div', 'event-category ' + ev.color);
    var span = createElement('span', '', ev.eventName);

    div.appendChild(square);
    div.appendChild(span);
    wrapper.appendChild(div);
  });

  if(!events.length) {
    var div = createElement('div', 'event empty');
    var span = createElement('span', '', 'No Events');

    div.appendChild(span);
    wrapper.appendChild(div);
  }

  if(currentWrapper) {
    currentWrapper.className = 'events out';
    currentWrapper.addEventListener('webkitAnimationEnd', function() {
      currentWrapper.parentNode.removeChild(currentWrapper);
      ele.appendChild(wrapper);
    });
    currentWrapper.addEventListener('oanimationend', function() {
      currentWrapper.parentNode.removeChild(currentWrapper);
      ele.appendChild(wrapper);
    });
    currentWrapper.addEventListener('msAnimationEnd', function() {
      currentWrapper.parentNode.removeChild(currentWrapper);
      ele.appendChild(wrapper);
    });
    currentWrapper.addEventListener('animationend', function() {
      currentWrapper.parentNode.removeChild(currentWrapper);
      ele.appendChild(wrapper);
    });
  } else {
    ele.appendChild(wrapper);
  }
}

Calendar.prototype.drawLegend = function() {
  var legend = createElement('div', 'legend');
  var calendars = this.events.map(function(e) {
    return e.calendar + '|' + e.color;
  }).reduce(function(memo, e) {
    if(memo.indexOf(e) === -1) {
      memo.push(e);
    }
    return memo;
  }, []).forEach(function(e) {
    var parts = e.split('|');
    var entry = createElement('span', 'entry ' +  parts[1], parts[0]);
    legend.appendChild(entry);
  });
  this.el.appendChild(legend);
}

Calendar.prototype.nextMonth = function() {
  this.current.add('months', 1);
  this.next = true;
  this.draw();
}

Calendar.prototype.prevMonth = function() {
  this.current.subtract('months', 1);
  this.next = false;
  this.draw();
}

window.Calendar = Calendar;

function createElement(tagName, className, innerText) {
  var ele = document.createElement(tagName);
  if(className) {
    ele.className = className;
  }
  if(innerText) {
    ele.innderText = ele.textContent = innerText;
  }
  return ele;
}
}();

!function() {
var data = [
  { eventName: 'Lunch Meeting w/ Mark', calendar: 'Work', color: 'orange' },
  // { eventName: 'Interview - Jr. Web Developer', calendar: 'Work', color: 'orange' },
  // { eventName: 'Demo New App to the Board', calendar: 'Work', color: 'orange' },
  // { eventName: 'Dinner w/ Marketing', calendar: 'Work', color: 'orange' },

  // { eventName: 'Game vs Portalnd', calendar: 'Sports', color: 'blue' },
  // { eventName: 'Game vs Houston', calendar: 'Sports', color: 'blue' },
  // { eventName: 'Game vs Denver', calendar: 'Sports', color: 'blue' },
  // { eventName: 'Game vs San Degio', calendar: 'Sports', color: 'blue' },

  // { eventName: 'School Play', calendar: 'Kids', color: 'yellow' },
  // { eventName: 'Parent/Teacher Conference', calendar: 'Kids', color: 'yellow' },
  // { eventName: 'Pick up from Soccer Practice', calendar: 'Kids', color: 'yellow' },
  // { eventName: 'Ice Cream Night', calendar: 'Kids', color: 'yellow' },

  // { eventName: 'Free Tamale Night', calendar: 'Other', color: 'green' },
  // { eventName: 'Bowling Team', calendar: 'Other', color: 'green' },
  // { eventName: 'Teach Kids to Code', calendar: 'Other', color: 'green' },
  // { eventName: 'Startup Weekend', calendar: 'Other', color: 'green' }
];



function addDate(ev) {
  
}

var calendar = new Calendar('#calendar', data);

}();



</script>

<script>
  let user = JSON.parse(sessionStorage.getItem('user'));
  var uid = user.uid;
  // console.log(uid);
  if(!user){
      window.location = "http://localhost:3000";
      document.getElementById("logout").style.display = "none";
  }
  document.getElementById("username").innerHTML = user.email;
  const logout = document.querySelector("#logmeout");
  logout.addEventListener('click', e => {
      e.preventDefault();
      firebase.auth().signOut()
          .then(function () {
              sessionStorage.removeItem('user');
              sessionStorage.clear();
              console.log(user.displayName + " has signed out.");
              window.location = "http://localhost:3000";
          }).catch(function (error) {
              // An error happened.
          });
  })
</script>

<%- include ("./partials/footer") %>